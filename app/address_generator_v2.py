#!/usr/bin/env python3
import os
import time
import threading
import multiprocessing
import logging
from tronpy.keys import PrivateKey
from pattern_matcher import PatternMatcher
import json
from datetime import datetime

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ app/)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ (–æ–±—â–∏–π –ª–æ–≥)
LOG_DIR = os.path.join(BASE_DIR, "logs")
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)
LOG_FILE = os.path.join(LOG_DIR, "address_generator_v2.log")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
stop_event = threading.Event()
# Lock –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –∫—Ä–∞—Å–∏–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
beautiful_lock = threading.Lock()
# –°—á–µ—Ç—á–∏–∫–∏
total_generated = multiprocessing.Value('i', 0)
beautiful_found = multiprocessing.Value('i', 0)

class AddressGeneratorV2:
    def __init__(self, pattern_matcher: PatternMatcher, min_score: int = 50):
        self.matcher = pattern_matcher
        self.min_score = min_score
        self.beautiful_addresses_file = os.path.join(BASE_DIR, "addresses", "beautiful_live.txt")
        self.beautiful_json_file = os.path.join(BASE_DIR, "addresses", "beautiful_live.json")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é addresses –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.join(BASE_DIR, "addresses"), exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        if not os.path.exists(self.beautiful_json_file):
            with open(self.beautiful_json_file, 'w') as f:
                json.dump([], f)
    
    def save_beautiful_address(self, address: str, private_key: str, analysis: dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∞–¥—Ä–µ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
        with beautiful_lock:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            with open(self.beautiful_addresses_file, 'a') as f:
                f.write(f"\n{'='*80}\n")
                f.write(f"–ù–∞–π–¥–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"–ê–¥—Ä–µ—Å: {address}\n")
                f.write(f"–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {private_key}\n")
                f.write(f"–û—Ü–µ–Ω–∫–∞: {analysis['score']}\n")
                f.write("–ü–∞—Ç—Ç–µ—Ä–Ω—ã:\n")
                for pattern in analysis['patterns_found']:
                    f.write(f"  - {pattern['type']}: {pattern['pattern']} (score: {pattern['score']})\n")
                f.flush()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ JSON —Ñ–∞–π–ª
            try:
                with open(self.beautiful_json_file, 'r') as f:
                    beautiful_list = json.load(f)
            except:
                beautiful_list = []
            
            beautiful_list.append({
                "found_at": datetime.now().isoformat(),
                "address": address,
                "private_key": private_key,
                "score": analysis['score'],
                "patterns": analysis['patterns_found']
            })
            
            with open(self.beautiful_json_file, 'w') as f:
                json.dump(beautiful_list, f, indent=2)
            
            beautiful_found.value += 1
            
            # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
            print(f"\nüéâ –ù–ê–ô–î–ï–ù –ö–†–ê–°–ò–í–´–ô –ê–î–†–ï–°! (Score: {analysis['score']})")
            print(f"   –ê–¥—Ä–µ—Å: {address}")
            patterns_str = ", ".join([f"{p['type']}:{p['pattern']}" for p in analysis['patterns_found']])
            print(f"   –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {patterns_str}")
            print(f"   –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∫—Ä–∞—Å–∏–≤—ã—Ö: {beautiful_found.value}\n")
    
    def worker(self, thread_id: int, save_all: bool = True):
        """
        –§—É–Ω–∫—Ü–∏—è-–≤–æ—Ä–∫–µ—Ä –¥–ª—è –ø–æ—Ç–æ–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∫—Ä–∞—Å–∏–≤—ã–µ –∞–¥—Ä–µ—Å–∞
        """
        thread_filename = os.path.join(BASE_DIR, "addresses", f"addresses_thread_{thread_id}.txt")
        logging.info(f"–ü–æ—Ç–æ–∫ {thread_id}: –∑–∞–ø—É—Å–∫ (save_all={save_all})")
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ save_all=True
            file_handle = open(thread_filename, "a") if save_all else None
            
            iteration = 0
            local_beautiful = 0
            
            while not stop_event.is_set():
                iteration += 1
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
                priv_key = PrivateKey.random()
                address = priv_key.public_key.to_base58check_address()
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                with total_generated.get_lock():
                    total_generated.value += 1
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
                analysis = self.matcher.analyze_address(address)
                
                # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –∫—Ä–∞—Å–∏–≤—ã–π
                if analysis["score"] >= self.min_score:
                    local_beautiful += 1
                    self.save_beautiful_address(address, priv_key.hex(), analysis)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –µ—Å–ª–∏ save_all=True
                if save_all and file_handle:
                    line = f"Address: {address}, PrivateKey: {priv_key.hex()}, Score: {analysis['score']}\n"
                    file_handle.write(line)
                    file_handle.flush()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10000 –∏—Ç–µ—Ä–∞—Ü–∏–π
                if iteration % 10000 == 0:
                    logging.info(f"–ü–æ—Ç–æ–∫ {thread_id}: {iteration} –∞–¥—Ä–µ—Å–æ–≤, {local_beautiful} –∫—Ä–∞—Å–∏–≤—ã—Ö –Ω–∞–π–¥–µ–Ω–æ")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
                if iteration % 100 == 0:
                    time.sleep(0.001)
                    
        except Exception as e:
            logging.exception(f"–ü–æ—Ç–æ–∫ {thread_id}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤")
        finally:
            if file_handle:
                file_handle.close()
        
        logging.info(f"–ü–æ—Ç–æ–∫ {thread_id} –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–π–¥–µ–Ω–æ –∫—Ä–∞—Å–∏–≤—ã—Ö: {local_beautiful}")


def print_statistics():
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥"""
    start_time = time.time()
    last_total = 0
    
    while not stop_event.is_set():
        time.sleep(5)
        current_total = total_generated.value
        current_beautiful = beautiful_found.value
        elapsed_time = time.time() - start_time
        
        # –°–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        addresses_per_second = (current_total - last_total) / 5
        total_speed = current_total / elapsed_time if elapsed_time > 0 else 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {int(elapsed_time)}—Å")
        print(f"   –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {current_total:,}")
        print(f"   –ö—Ä–∞—Å–∏–≤—ã—Ö –Ω–∞–π–¥–µ–Ω–æ: {current_beautiful}")
        print(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {addresses_per_second:.0f} –∞–¥—Ä/—Å–µ–∫ (—Å—Ä–µ–¥–Ω—è—è: {total_speed:.0f} –∞–¥—Ä/—Å–µ–∫)")
        if current_beautiful > 0:
            print(f"   –ß–∞—Å—Ç–æ—Ç–∞ –∫—Ä–∞—Å–∏–≤—ã—Ö: 1 –∏–∑ {current_total // current_beautiful:,}")
        
        last_total = current_total


def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫—Ä–∞—Å–∏–≤—ã—Ö TRON –∞–¥—Ä–µ—Å–æ–≤ v2')
    parser.add_argument('--threads', '-t', type=int, default=10,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)')
    parser.add_argument('--min-score', '-s', type=int, default=50,
                       help='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)')
    parser.add_argument('--no-save-all', action='store_true',
                       help='–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å–µ –∞–¥—Ä–µ—Å–∞, —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Å–∏–≤—ã–µ')
    parser.add_argument('--patterns-file', '-p',
                       help='–§–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (JSON)')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º matcher
    matcher = PatternMatcher(args.patterns_file)
    generator = AddressGeneratorV2(matcher, args.min_score)
    
    logging.info(f"–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ TRON –∞–¥—Ä–µ—Å–æ–≤ v2")
    logging.info(f"–ü–æ—Ç–æ–∫–æ–≤: {args.threads}")
    logging.info(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {args.min_score}")
    logging.info(f"–°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å–µ –∞–¥—Ä–µ—Å–∞: {not args.no_save_all}")
    
    print(f"\nüöÄ –ì–ï–ù–ï–†–ê–¢–û–† –ö–†–ê–°–ò–í–´–• TRON –ê–î–†–ï–°–û–í V2")
    print(f"{'='*50}")
    print(f"–ü–æ—Ç–æ–∫–æ–≤: {args.threads}")
    print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞: {args.min_score}")
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤: {'–î–∞' if not args.no_save_all else '–ù–µ—Ç'}")
    print(f"–ö—Ä–∞—Å–∏–≤—ã–µ –∞–¥—Ä–µ—Å–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: addresses/beautiful_live.txt")
    print(f"{'='*50}")
    print(f"–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_thread = threading.Thread(target=print_statistics, daemon=True)
    stats_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–µ –ø–æ—Ç–æ–∫–∏
    threads = []
    try:
        for i in range(1, args.threads + 1):
            t = threading.Thread(
                target=generator.worker, 
                args=(i, not args.no_save_all)
            )
            t.start()
            threads.append(t)
        
        # –û–∂–∏–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è Ctrl+C
        while True:
            time.sleep(1)
            
    except KeyboardInterrupt:
        print("\n\n‚è∏Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...")
        stop_event.set()
    
    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for t in threads:
        t.join()
    
    print(f"\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print(f"   –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_generated.value:,}")
    print(f"   –ö—Ä–∞—Å–∏–≤—ã—Ö –Ω–∞–π–¥–µ–Ω–æ: {beautiful_found.value}")
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: addresses/beautiful_live.txt")


if __name__ == "__main__":
    main()